#include "obj.h"
#include <cstdio>
#include <cstdlib>
#include <glm/gtx/normal.hpp>

// https://en.wikipedia.org/wiki/STL_(file_format)

void SaveWavefrontOBJ(
    const std::string &path,
    const std::vector<glm::vec3> &points,
    const std::vector<glm::ivec3> &triangles,
    const std::vector<glm::vec2> &uvs)
{
    // Assumptions made by the function:
    //  - points.size() == uvs.size()

    FILE* file = fopen(path.c_str(), "w");
    if (!file)
        abort();
    
    fprintf(file, "# Generated by a fork of Micheal Fogleman's `hmm` utility\n");
    fprintf(file, "# By Natalia Cholewa; https://github.com/natanalt/hmm\n");

    fprintf(file, "\n# Vertex positions\n");
    for (glm::vec3 vertexPos : points) {
        fprintf(file, "v %f %f %f\n", vertexPos.x, vertexPos.y, vertexPos.z);
    }
    
    fprintf(file, "\n# Vertex normals\n");
    for (glm::ivec3 indices : triangles) {
        const glm::vec3 p0 = points[indices.x];
        const glm::vec3 p1 = points[indices.y];
        const glm::vec3 p2 = points[indices.z];
        const glm::vec3 normal = glm::triangleNormal(p0, p1, p2);
        fprintf(file, "vn %f %f %f\n", normal.x, normal.y, normal.z);
    }

    fprintf(file, "\n# Vertex UVs\n");
    for (glm::vec2 vertexUv : uvs) {
        fprintf(file, "vt %f %f\n", vertexUv.x, vertexUv.y);
    }

    fprintf(file, "\n# Faces\n");
    for (int indexTri = 0; indexTri < int(triangles.size()); indexTri++) {
        int indexA = triangles[indexTri].x;
        int indexB = triangles[indexTri].y;
        int indexC = triangles[indexTri].z;

        fprintf(
            file,
            "f %d/%d/%d %d/%d/%d %d/%d/%d\n",
            // Triangle A
            indexA + 1,   // Vertex position
            indexA + 1,   // Vertex UV (aligned with positions)
            indexTri + 1, // Vertex normal (aligned with triangle)
            // Triangle A
            indexB + 1,   // Vertex position
            indexB + 1,   // Vertex UV (aligned with positions)
            indexTri + 1, // Vertex normal (aligned with triangle)
            // Triangle A
            indexC + 1,   // Vertex position
            indexC + 1,   // Vertex UV (aligned with positions)
            indexTri + 1  // Vertex normal (aligned with triangle)
        );
    }

    fprintf(file, "\n");
    fclose(file);
}
